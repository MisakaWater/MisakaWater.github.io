{"pages":[{"title":"","text":"//修改url的方法 //sub:数组下标 //arr:表情数组 async function setUrl(text) { if (!!(window.history && history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = text); } } //修改url为默认url async function cleanUrl(url) { if (!!(window.history && history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = url); } } function getPageHeight() { let body = document.body, html = document.documentElement; let height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight); return height; } function getWindowHeight() { let height = window.innerHeight; return height; } //循环动画使用的表情 var kaomoji = [ \"(｀･ω･)\", \"(〃∀〃)\", \"w(ﾟДﾟ)w\", \"_(:з」∠)_\" ] var emoji = [ \"🌶️\", \"💉\", \"💦\", \"🐂\", \"🍺\" ] var bar = [ \"-\", \"0\" ] var defUrl = window.location.href.split('#')[0]; //默认url var scrollProgressIntervalId = null; function scrollBarClick() { UrlProgress(bar, 0, 1, 50, -1); let e = window.event; if (e != undefined) { obj = e.target || e.srcElement; } if (e.path[0].innerText == \"click\") { e.path[0].innerText = \"stop\"; window.addEventListener('scroll', e => scrollProgress(bar), true); } else { alert(\"需要停止请刷新!\"); e.path[0].innerText = \"click\"; window.removeEventListener('scroll', scrollProgress(bar), true); } } function scrollProgress(arr) { let now; let scrollAvail = getPageHeight() - getWindowHeight(); // 可滚动的高度 let scrollTop = document.documentElement.scrollTop || document.body.scrollTop || window.pageYOffset; let length = 50; now = (scrollTop / scrollAvail) * length; now = parseInt(now); UrlProgress(arr, 0, 1, 50, now); } //arr 对应前景，背景数组 //subBack 进度条背景 //subFore 进度条前景 //length 进度条总长 //now 当前进度 function UrlProgress(arr, subBack, subFore, length, now) { let args = \"\"; for (let i = 0; i < length; i++) { args = args + arr[subBack] } if (now >= 0) { args = args.split(''); args.splice(now, 1, arr[subFore]); args = args.join(''); } setUrl(args); } //循环动画 var UrlLoopIntervalId = null; function UrlLoop(speed, arr, defUrl) { var e = window.event; if (e != undefined) { obj = e.target || e.srcElement; e.path[0].innerText = \"stop\"; } //上面: //选择触发方法的元素 if (UrlLoopIntervalId == null) { this.speed = speed || '1000'; var i = 0; UrlLoopIntervalId = setInterval(function () { setUrl(arr[i]); i++; if (i == arr.length) { i = 0; } }, speed); } else { clearInterval(UrlLoopIntervalId); cleanUrl(defUrl); UrlLoopIntervalId = null; e.path[0].innerText = \"click\"; } }","link":"/js/url.js"}],"posts":[{"title":"201906 俄罗斯旅行","text":"1. 第一天![红场的一角](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080082.JPG “红场的一角”)![国立商场 bilingbiling 的好酷](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080110.jpg “国立商场 bilingbiling 的好酷”)![地铁下去真的好久](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080134.jpg “地铁下去真的好久”)![朋友送的御坂（老婆）小手办](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080151.jpg “朋友送的御坂（老婆）小手办”) 2. 第二天![莫斯科国立大学不给进 555](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080157.jpg “莫斯科国立大学不给进 555”)![凯旋门刚拍完就有个小哥哥找我拍照](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080168.jpg “凯旋门刚拍完就有个小哥哥找我拍照”)![重回红场从不同的角度拍的好帅！](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080183.jpg “第二天重回红场从不同的角度拍的好帅！”)![红场外的马路好塞车在这等了差不多 30 分钟的出租车](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080189.JPG “红场外的马路好塞车在这等了差不多 30 分钟的出租车”) 3. 第三天![谢列梅捷沃机场](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080206.jpg “谢列梅捷沃机场”)![旧车](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080236.jpg “旧车”)![天给你戳破啦](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080292.jpg “天给你戳破啦”)![听说成吉思汗在这里扎过营](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080334.jpg “听说成吉思汗在这里扎过营”) 4. 第好多天![刚下完一场大雨](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080609.jpg “刚下完一场大雨”)![回到莫斯科一下飞机就被惊艳到了](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080617.jpg “回到莫斯科一下飞机就被惊艳到了”)![差不多 10 点多才日落](https://raw.githubusercontent.com/MisakaWater/MisakaWater.github.io/master/2019/06/26/201906 俄罗斯旅行/L1080657.jpg “差不多 10 点多才日落”)","link":"/2019/06/26/201906俄罗斯旅行/"},{"title":"EFCore数据库反向工程","text":"之前的大数据比赛取消了，就去弄了另外一个项目。 程序是师兄写的，但是后台数据库不见了，只能自己生成一个数据库来测试，有一个特点是程序运行时会自动生成空的数据表，这样就不用很麻烦的对着java的代码复现数据表结构（ef真香），在写爬虫找数据的时候就想着，能不能用程序把这些表变成实体类呢，网上找了一番，找到了解决方法就重新整理一下记录下了。 源链接:https://www.cnblogs.com/qidakang/p/11302327.html 打开VS，新建一个工程，然后安装如下的包 反向MySQL数据库就安装: 1234MySql.Data.EntityFrameworkCorePomelo.EntityFrameworkCore.MySqlMicrosoft.EntityFrameworkCore.ToolsMicrosoft.VisualStudio.Web.CodeGeneration.Design 反向SqlServer数据库就安装: 1234Microsoft.EntityFrameworkCoreMicrosoft.EntityFrameworkCore.SqlServerMicrosoft.EntityFrameworkCore.ToolsMicrosoft.VisualStudio.Web.CodeGeneration.Design 安装好后打开[程序包控制台]，接着输入 MySQL版本： 1234第一次生成实体类：Scaffold-DbContext \"Server=127.0.0.1;port=3306;Database=db; User=root;Password=root;\"Pomelo.EntityFrameworkCore.MySql -OutputDir Models更新实体类：Scaffold-DbContext \"Server=127.0.0.1;port=3306;Database=db; User=root;Password=root;\" Pomelo.EntityFrameworkCore.MySql -OutputDir Models -Force SqlServer版本： 1234第一次生成实体：Scaffold-DbContext \"Server=127.0.0.1;port=3306;Database=db; User=root;Password=root;\"Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models更新实体类：Scaffold-DbContext \"Server=127.0.0.1;port=3306;Database=db; User=root;Password=root;\"Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Force 运行后会多出一个Models文件夹，里面就是这个数据库的所有表","link":"/2020/04/03/EFCore数据库反向工程/"},{"title":"JS 实现 URL 变换","text":"前言今天无聊找东西玩翻书签翻到了 http://glench.com/hash/就想着找源码搬到 blog 上，转了半天发现作者没开源，就有了下文。 演示警告！请使用无痕模式再点击下面的按钮，不然会有一堆的历史记录。表情循环：click滚动条位置动画：click 代码 ver0.2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131//修改 url 的方法//sub: 数组下标//arr: 表情数组async function setUrl(text) { if (!!(window.history &amp;&amp; history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = text); }}//修改 url 为默认 urlasync function cleanUrl(url) { if (!!(window.history &amp;&amp; history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = url); }}function getPageHeight() { let body = document.body, html = document.documentElement; let height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight); return height;}function getWindowHeight() { let height = window.innerHeight; return height;}//循环动画使用的表情var kaomoji = [ \"(｀･ω･)\", \"(〃∀〃)\", \"w(ﾟДﾟ)w\", \"_(:з」∠)_\"]var emoji = [ \"🌶️\", \"💉\", \"💦\", \"🐂\", \"🍺\"]var bar = [ \"-\", \"0\"]var defUrl = window.location.href.split('#')[0]; //默认 urlvar scrollProgressIntervalId = null;function scrollBarClick() { UrlProgress(bar, 0, 1, 50, -1); let e = window.event; if (e != undefined) { obj = e.target || e.srcElement; } if (e.path[0].innerText == \"click\") { e.path[0].innerText = \"stop\"; window.addEventListener('scroll', e =&gt; scrollProgress(bar), true); } else { alert(\"需要停止请刷新！\"); e.path[0].innerText = \"click\"; window.removeEventListener('scroll', scrollProgress(bar), true); }}function scrollProgress(arr) { let now; let scrollAvail = getPageHeight() - getWindowHeight(); // 可滚动的高度 let scrollTop = document.documentElement.scrollTop || document.body.scrollTop || window.pageYOffset; let length = 50; now = (scrollTop / scrollAvail) * length; now = parseInt(now); UrlProgress(arr, 0, 1, 50, now);}//arr 对应前景，背景数组//subBack 进度条背景//subFore 进度条前景//length 进度条总长//now 当前进度function UrlProgress(arr, subBack, subFore, length, now) { let args = \"\"; for (let i = 0; i &lt; length; i++) { args = args + arr[subBack] } if (now &gt;= 0) { args = args.split(''); args.splice(now, 1, arr[subFore]); args = args.join(''); } setUrl(args);}//循环动画var UrlLoopIntervalId = null;function UrlLoop(speed, arr, defUrl) { var e = window.event; if (e != undefined) { obj = e.target || e.srcElement; e.path[0].innerText = \"stop\"; } //上面： //选择触发方法的元素 if (UrlLoopIntervalId == null) { this.speed = speed || '1000'; var i = 0; UrlLoopIntervalId = setInterval(function () { setUrl(arr[i]); i++; if (i == arr.length) { i = 0; } }, speed); } else { clearInterval(UrlLoopIntervalId); cleanUrl(defUrl); UrlLoopIntervalId = null; e.path[0].innerText = \"click\"; }} ver0.1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115//修改 url 的方法//sub: 数组下标//arr: 表情数组async function setUrl(text) { if (!!(window.history &amp;&amp; history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = text); }}//修改 url 为默认 urlasync function cleanUrl(url) { if (!!(window.history &amp;&amp; history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = url); }}function getPageHeight() { let body = document.body, html = document.documentElement; let height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight); return height;}function getWindowHeight() { let height = window.innerHeight; return height;}//循环动画使用的表情var kaomoji = [ \"(｀･ω･)\", \"(〃∀〃)\", \"w(ﾟДﾟ)w\", \"_(:з」∠)_\"]var emoji = [ \"🌶️\", \"💉\", \"💦\", \"🐂\", \"🍺\"]var bar = [ \"-\", \"0\"]var defUrl = window.location.href.split('#')[0]; //默认 urlvar scrollProgressIntervalId = null;window.addEventListener('scroll', e =&gt; scrollProgress(bar), true)function scrollProgress(arr) { let now; let scrollAvail = getPageHeight() - getWindowHeight(); // 可滚动的高度 let scrollTop = document.documentElement.scrollTop || document.body.scrollTop || window.pageYOffset; let length = 50; now = (scrollTop / scrollAvail) * length; now = parseInt(now); UrlProgress(arr, 0, 1, 50, now);}//arr 对应前景，背景数组//subBack 进度条背景//subFore 进度条前景//length 进度条总长//now 当前进度function UrlProgress(arr, subBack, subFore, length, now) { let args = \"\"; for (let i = 0; i &lt; length; i++) { args = args + arr[subBack] } if (now &gt;= 0) { args = args.split(''); args.splice(now, 1, arr[subFore]); args = args.join(''); } setUrl(args);}//循环动画var UrlLoopIntervalId = null;function UrlLoop(speed, arr, defUrl) { var e = window.event; if (e != undefined) { obj = e.target || e.srcElement; e.path[0].innerText = \"stop\"; } //上面： //选择触发方法的元素 if (UrlLoopIntervalId == null) { this.speed = speed || '1000'; var i = 0; UrlLoopIntervalId = setInterval(function () { setUrl(arr[i]); i++; if (i == arr.length) { i = 0; } }, speed); } else { clearInterval(UrlLoopIntervalId); cleanUrl(defUrl); UrlLoopIntervalId = null; e.path[0].innerText = \"click\"; }} TODO [x]加一个进度条动画获取滚动位置改变进度。 同时打开多个弹窗，实现播放动画。 按钮解绑滚动条事件 在进度条的末端加进度的百分比","link":"/2019/07/21/JS实现URL变换/"},{"title":"记：winserver2008 的任务计划特性","text":"winserver2008 中任务计划程序运行程序时，程序的运行路径不是指定的路径下，而是 c:\\Windows\\system32\\下 解决办法 文件放到 system32 中执行。 写一个 bat 将计划中操作指向 bat 文件，bat 文件先 cd 再执行程序。","link":"/2020/02/27/winserver2008的任务计划特性/"},{"title":"Windows10 下使用 IDEA 配置 Spark 的 Debug 环境","text":"之前报名了学校的一些大数据比赛，做的笔记整理一下发出来，供以后查看第一次用 ide 和 scala，不足之处还请批评指正 idea 的安装就不赘述了。 spark 在本地不需要安装。 jdk = 1.8 spark version = 2.0.0，比较老，但是是比赛的要求。 hadoop version = 2.6.0 scala version = 2.11.0 在 idea 中建立一个 maven 工程，注意路径不能包括中文 添加 pom.xml，示例在 Source\\Task3\\example\\pom.xml 中 pom.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;example&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;spark.version&gt;2.0.0&lt;/spark.version&gt; &lt;scala.version&gt;2.11&lt;/scala.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-core_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-streaming_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-sql_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-hive_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-mllib_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.scala-tools&lt;/groupId&gt; &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt; &lt;version&gt;2.15.2&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;compile&lt;/goal&gt; &lt;goal&gt;testCompile&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.6.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.19&lt;/version&gt; &lt;configuration&gt; &lt;skip&gt;true&lt;/skip&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 在 Idea 左侧 Project 窗口中选中 src\\main 右键添加文件夹 scala 选中 scala 右键 make directory as -&gt; Sources Root scala 变成蓝色后右键 new -&gt; scala class -&gt;选择 object，输入名称 我们先写一个最简单的 CsvShow 程序让他能在本地运行并且 debug CsvShow Code 12345678910111213141516171819package org.example.spark.scalaimport org.apache.spark.sql.{DataFrame, SparkSession}import org.apache.spark.{SparkConf, SparkContext}object CsvShow { def main(args:Array[String]):Unit= { val spark: SparkSession = SparkSession.builder() .master(\"local[*]\") .appName(\"CsvShow\") .config(\"spark.sql.warehouse.dir\", \"file:/\") .getOrCreate() val csv: DataFrame = spark.read.csv(\"../../../../data/mysql.csv\") csv.show() val pdf: DataFrame = csv.toDF() pdf.show() spark.stop() }} 解压 Hadoop，在没有安装 hadoop 的情况下是不能进行 spark 程序的本地 debug 我们先下载如下两个文件 hadoop-2.6.0.tar.gz 和 hadooponwindows-master.zip 先将 hadoop 解压出来 再解压 hadooponwindows 到 hadoop 的根目录下，提示覆盖选择全覆盖 添加如下环境变量 变量名=HADOOP_HOME, 变量值=你解压的路径 在 path 中添加 %HADOOP_HOME%\\bin 变量 打开 cmd，输入 hadoop version，显示版本说明 hadoop 环境变量配置正确 配置 Hadoop 环境 修改 etc\\hadoop\\hadoop-env.cmd 中的 JAVA_HOME，如 JAVA_HOME=C:\\PROGRA~1\\Java\\jdk1.8.0_241，路径中不能有空格 在根目录下添加 datanode、namenode 和 tmp 文件夹 修改 etc\\hadoop\\hdfs-site.xml，添加如下 xml, 注意/D:/hadoop-2.6.0/namenode 和/D:/hadoop-2.6.0/datanode 这两个值需要时之前创建文件夹的路径 1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;/D:/hadoop-2.6.0/namenode&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;/D:/hadoop-2.6.0/datanode&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 修改 etc\\hadoop\\core-site.xml 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 修改 etc\\hadoop\\mapred-site.xml 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 修改 etc\\hadoop\\yarn-site.xml 12345678910&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 以管理员身份打开 cmd 输入 hdfs namenode -format 来执行格式化 hdfs，执行后 namenode 文件里会自动生成一个 current 文件 cd 到根目录下 sbin 文件夹，输入 start-all.cmd 启动全部的 hadoop 服务 在相应的方法中右键 Debug “*”，就可以运行本地 debug 调试","link":"/2020/03/11/Windows10下使用IDEA配置Spark的Debug环境/"},{"title":"将堆栈星轨变成一段流星雨视频","text":"前言疫情期间一直在家呆着也没事做就拍拍星星前两天拍了张星轨 ，但是忘了关长时间降噪全是断点不怎么满意 昨天晚上又拍了一次，比较成功还误打误撞的做了一段流星雨视频（雾）打算记录一下，供以后参考 星轨的堆栈拍摄方法网上又很多教程这里就不赘述了 这里直接介绍后期处理的部分 前提： 只需要一种运动方向的星星 星星的运动轨迹是自下而上的话就需要进行反序，自上而下则不需要对图片进行反序 后期我使用的是 lr 当然也可以用 acr 但是不方便统一管理图片 将图片导入电脑后在 lr 中添加图片然后进行调整 调整好照片后我们全选刚才拍摄的照片 在照片上右键——设置——同步设置 然后进行导出，导出设置中需要尽量选择小尺寸的图片输出不然后面的处理会很卡 导出后先需要对文件进行反序排列我编写了一个程序（附件在本文最后）进行反序 将程序放到图片文件夹内双击运行后目录下会多出一个 Re 文件夹里面就是反序好的图片 接下来我们打开 pr 建立好工程文档后以图片序列的方式导入反序好的图片 添加效果中视频效果——时间——残影 设置残影数量为 80、衰减 0.95、残影运算符最大值，其他的默认 导出就可以有一段类似流星雨的视频 也算是星空的另一种表现方式吧 文件反序程序","link":"/2020/02/19/将堆栈星轨变成一段流星雨视频/"}],"tags":[{"name":"旅行","slug":"旅行","link":"/tags/旅行/"},{"name":"风景","slug":"风景","link":"/tags/风景/"},{"name":"摄影","slug":"摄影","link":"/tags/摄影/"},{"name":"照片","slug":"照片","link":"/tags/照片/"},{"name":"好康的","slug":"好康的","link":"/tags/好康的/"},{"name":"js","slug":"js","link":"/tags/js/"},{"name":"动画","slug":"动画","link":"/tags/动画/"},{"name":"好玩的","slug":"好玩的","link":"/tags/好玩的/"},{"name":"Windows Server","slug":"Windows-Server","link":"/tags/Windows-Server/"},{"name":"scala","slug":"scala","link":"/tags/scala/"},{"name":"spark","slug":"spark","link":"/tags/spark/"},{"name":"idea","slug":"idea","link":"/tags/idea/"},{"name":"hadoop","slug":"hadoop","link":"/tags/hadoop/"},{"name":"大数据","slug":"大数据","link":"/tags/大数据/"},{"name":"EFCore","slug":"EFCore","link":"/tags/EFCore/"},{"name":"C#","slug":"C","link":"/tags/C/"},{"name":".NetCore","slug":"NetCore","link":"/tags/NetCore/"},{"name":"Mysql","slug":"Mysql","link":"/tags/Mysql/"},{"name":"SqlServer","slug":"SqlServer","link":"/tags/SqlServer/"}],"categories":[{"name":"摄影","slug":"摄影","link":"/categories/摄影/"},{"name":"编程","slug":"编程","link":"/categories/编程/"},{"name":"服务器","slug":"服务器","link":"/categories/服务器/"},{"name":"数据库","slug":"编程/数据库","link":"/categories/编程/数据库/"}]}