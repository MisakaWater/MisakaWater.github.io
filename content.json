{"pages":[],"posts":[{"title":"JS 实现 URL 变换","text":"前言今天无聊找东西玩翻书签翻到了 http://glench.com/hash/就想着找源码搬到 blog 上，转了半天发现作者没开源，就有了下文。 演示警告！请使用无痕模式再点击下面的按钮，不然会有一堆的历史记录。表情循环：click滚动条位置动画：click 代码 ver0.2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131//修改 url 的方法//sub: 数组下标//arr: 表情数组async function setUrl(text) { if (!!(window.history &amp;&amp; history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = text); }}//修改 url 为默认 urlasync function cleanUrl(url) { if (!!(window.history &amp;&amp; history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = url); }}function getPageHeight() { let body = document.body, html = document.documentElement; let height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight); return height;}function getWindowHeight() { let height = window.innerHeight; return height;}//循环动画使用的表情var kaomoji = [ &quot;(｀･ω･)&quot;, &quot;(〃∀〃)&quot;, &quot;w(ﾟДﾟ)w&quot;, &quot;_(:з」∠)_&quot;]var emoji = [ &quot;🌶️&quot;, &quot;💉&quot;, &quot;💦&quot;, &quot;🐂&quot;, &quot;🍺&quot;]var bar = [ &quot;-&quot;, &quot;0&quot;]var defUrl = window.location.href.split('#')[0]; //默认 urlvar scrollProgressIntervalId = null;function scrollBarClick() { UrlProgress(bar, 0, 1, 50, -1); let e = window.event; if (e != undefined) { obj = e.target || e.srcElement; } if (e.path[0].innerText == &quot;click&quot;) { e.path[0].innerText = &quot;stop&quot;; window.addEventListener('scroll', e =&gt; scrollProgress(bar), true); } else { alert(&quot;需要停止请刷新！&quot;); e.path[0].innerText = &quot;click&quot;; window.removeEventListener('scroll', scrollProgress(bar), true); }}function scrollProgress(arr) { let now; let scrollAvail = getPageHeight() - getWindowHeight(); // 可滚动的高度 let scrollTop = document.documentElement.scrollTop || document.body.scrollTop || window.pageYOffset; let length = 50; now = (scrollTop / scrollAvail) * length; now = parseInt(now); UrlProgress(arr, 0, 1, 50, now);}//arr 对应前景，背景数组//subBack 进度条背景//subFore 进度条前景//length 进度条总长//now 当前进度function UrlProgress(arr, subBack, subFore, length, now) { let args = &quot;&quot;; for (let i = 0; i &lt; length; i++) { args = args + arr[subBack] } if (now &gt;= 0) { args = args.split(''); args.splice(now, 1, arr[subFore]); args = args.join(''); } setUrl(args);}//循环动画var UrlLoopIntervalId = null;function UrlLoop(speed, arr, defUrl) { var e = window.event; if (e != undefined) { obj = e.target || e.srcElement; e.path[0].innerText = &quot;stop&quot;; } //上面： //选择触发方法的元素 if (UrlLoopIntervalId == null) { this.speed = speed || '1000'; var i = 0; UrlLoopIntervalId = setInterval(function () { setUrl(arr[i]); i++; if (i == arr.length) { i = 0; } }, speed); } else { clearInterval(UrlLoopIntervalId); cleanUrl(defUrl); UrlLoopIntervalId = null; e.path[0].innerText = &quot;click&quot;; }} ver0.1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115//修改 url 的方法//sub: 数组下标//arr: 表情数组async function setUrl(text) { if (!!(window.history &amp;&amp; history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = text); }}//修改 url 为默认 urlasync function cleanUrl(url) { if (!!(window.history &amp;&amp; history.pushState)) { history.replaceState(null, null, window.location.href.split('#')[0] = url); }}function getPageHeight() { let body = document.body, html = document.documentElement; let height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight); return height;}function getWindowHeight() { let height = window.innerHeight; return height;}//循环动画使用的表情var kaomoji = [ &quot;(｀･ω･)&quot;, &quot;(〃∀〃)&quot;, &quot;w(ﾟДﾟ)w&quot;, &quot;_(:з」∠)_&quot;]var emoji = [ &quot;🌶️&quot;, &quot;💉&quot;, &quot;💦&quot;, &quot;🐂&quot;, &quot;🍺&quot;]var bar = [ &quot;-&quot;, &quot;0&quot;]var defUrl = window.location.href.split('#')[0]; //默认 urlvar scrollProgressIntervalId = null;window.addEventListener('scroll', e =&gt; scrollProgress(bar), true)function scrollProgress(arr) { let now; let scrollAvail = getPageHeight() - getWindowHeight(); // 可滚动的高度 let scrollTop = document.documentElement.scrollTop || document.body.scrollTop || window.pageYOffset; let length = 50; now = (scrollTop / scrollAvail) * length; now = parseInt(now); UrlProgress(arr, 0, 1, 50, now);}//arr 对应前景，背景数组//subBack 进度条背景//subFore 进度条前景//length 进度条总长//now 当前进度function UrlProgress(arr, subBack, subFore, length, now) { let args = &quot;&quot;; for (let i = 0; i &lt; length; i++) { args = args + arr[subBack] } if (now &gt;= 0) { args = args.split(''); args.splice(now, 1, arr[subFore]); args = args.join(''); } setUrl(args);}//循环动画var UrlLoopIntervalId = null;function UrlLoop(speed, arr, defUrl) { var e = window.event; if (e != undefined) { obj = e.target || e.srcElement; e.path[0].innerText = &quot;stop&quot;; } //上面： //选择触发方法的元素 if (UrlLoopIntervalId == null) { this.speed = speed || '1000'; var i = 0; UrlLoopIntervalId = setInterval(function () { setUrl(arr[i]); i++; if (i == arr.length) { i = 0; } }, speed); } else { clearInterval(UrlLoopIntervalId); cleanUrl(defUrl); UrlLoopIntervalId = null; e.path[0].innerText = &quot;click&quot;; }} TODO 加一个进度条动画获取滚动位置改变进度。 同时打开多个弹窗，实现播放动画。 按钮解绑滚动条事件 在进度条的末端加进度的百分比","link":"/2019/07/21/JS-%E5%AE%9E%E7%8E%B0-URL-%E5%8F%98%E6%8D%A2/"},{"title":"EFCore数据库反向工程","text":"之前的大数据比赛取消了，就去弄了另外一个项目。 程序是师兄写的，但是后台数据库不见了，只能自己生成一个数据库来测试，有一个特点是程序运行时会自动生成空的数据表，这样就不用很麻烦的对着java的代码复现数据表结构（ef真香），在写爬虫找数据的时候就想着，能不能用程序把这些表变成实体类呢，网上找了一番，找到了解决方法就重新整理一下记录下了。 源链接:https://www.cnblogs.com/qidakang/p/11302327.html 打开VS，新建一个工程，然后安装如下的包 反向MySQL数据库就安装: 1234MySql.Data.EntityFrameworkCorePomelo.EntityFrameworkCore.MySqlMicrosoft.EntityFrameworkCore.ToolsMicrosoft.VisualStudio.Web.CodeGeneration.Design 反向SqlServer数据库就安装: 1234Microsoft.EntityFrameworkCoreMicrosoft.EntityFrameworkCore.SqlServerMicrosoft.EntityFrameworkCore.ToolsMicrosoft.VisualStudio.Web.CodeGeneration.Design 安装好后打开[程序包控制台]，接着输入 MySQL版本： 1234第一次生成实体类：Scaffold-DbContext &quot;Server=127.0.0.1;port=3306;Database=db; User=root;Password=root;&quot;Pomelo.EntityFrameworkCore.MySql -OutputDir Models更新实体类：Scaffold-DbContext &quot;Server=127.0.0.1;port=3306;Database=db; User=root;Password=root;&quot; Pomelo.EntityFrameworkCore.MySql -OutputDir Models -Force SqlServer版本： 1234第一次生成实体：Scaffold-DbContext &quot;Server=127.0.0.1;port=3306;Database=db; User=root;Password=root;&quot;Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models更新实体类：Scaffold-DbContext &quot;Server=127.0.0.1;port=3306;Database=db; User=root;Password=root;&quot;Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Force 运行后会多出一个Models文件夹，里面就是这个数据库的所有表","link":"/2020/04/03/EFCore%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8D%E5%90%91%E5%B7%A5%E7%A8%8B/"},{"title":"使用VUE时遇到关于符号连接的一个BUG","text":"最近准备试一下ABP框架做个vue的spa应用，按着教程一步步走下去，走到运行yarn serve就报了如下错误 网上查了一下以为是某些插件没装好，不过转念想想ABP这么牛的框架不会吧不会吧不会吧。 很奇怪的是把vue复制到其他文件夹可以正常运行，唯独在source文件夹里面不能正常运行，Google了一早上后打算不用vue，最后再仔细看了一下返回的报错 才想起来source文件夹因为之前C盘空间不够移到D盘在mklink回C盘的，导致在C盘开Power shell运行D盘的文件就会报错。 解决方法在D盘开Power shell运行yarn serve即可","link":"/2020/05/10/%E4%BD%BF%E7%94%A8VUE%E6%97%B6%E9%81%87%E5%88%B0%E5%85%B3%E4%BA%8E%E7%AC%A6%E5%8F%B7%E8%BF%9E%E6%8E%A5%E7%9A%84%E4%B8%80%E4%B8%AABUG/"},{"title":"Windows10 下使用 IDEA 配置 Spark 的 Debug 环境","text":"之前报名了学校的一些大数据比赛，做的笔记整理一下发出来，供以后查看第一次用 ide 和 scala，不足之处还请批评指正 idea 的安装就不赘述了。 spark 在本地不需要安装。 jdk = 1.8 spark version = 2.0.0，比较老，但是是比赛的要求。 hadoop version = 2.6.0 scala version = 2.11.0 在 idea 中建立一个 maven 工程，注意路径不能包括中文 添加 pom.xml，示例在 Source\\Task3\\example\\pom.xml 中 pom.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;example&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;spark.version&gt;2.0.0&lt;/spark.version&gt; &lt;scala.version&gt;2.11&lt;/scala.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-core_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-streaming_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-sql_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-hive_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-mllib_${scala.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.scala-tools&lt;/groupId&gt; &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt; &lt;version&gt;2.15.2&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;compile&lt;/goal&gt; &lt;goal&gt;testCompile&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.6.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.19&lt;/version&gt; &lt;configuration&gt; &lt;skip&gt;true&lt;/skip&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 在 Idea 左侧 Project 窗口中选中 src\\main 右键添加文件夹 scala 选中 scala 右键 make directory as -&gt; Sources Root scala 变成蓝色后右键 new -&gt; scala class -&gt;选择 object，输入名称 我们先写一个最简单的 CsvShow 程序让他能在本地运行并且 debug CsvShow Code 12345678910111213141516171819package org.example.spark.scalaimport org.apache.spark.sql.{DataFrame, SparkSession}import org.apache.spark.{SparkConf, SparkContext}object CsvShow { def main(args:Array[String]):Unit= { val spark: SparkSession = SparkSession.builder() .master(&quot;local[*]&quot;) .appName(&quot;CsvShow&quot;) .config(&quot;spark.sql.warehouse.dir&quot;, &quot;file:/&quot;) .getOrCreate() val csv: DataFrame = spark.read.csv(&quot;../../../../data/mysql.csv&quot;) csv.show() val pdf: DataFrame = csv.toDF() pdf.show() spark.stop() }} 解压 Hadoop，在没有安装 hadoop 的情况下是不能进行 spark 程序的本地 debug 我们先下载如下两个文件 hadoop-2.6.0.tar.gz 和 hadooponwindows-master.zip 先将 hadoop 解压出来 再解压 hadooponwindows 到 hadoop 的根目录下，提示覆盖选择全覆盖 添加如下环境变量 变量名=HADOOP_HOME, 变量值=你解压的路径 在 path 中添加 %HADOOP_HOME%\\bin 变量 打开 cmd，输入 hadoop version，显示版本说明 hadoop 环境变量配置正确 配置 Hadoop 环境 修改 etc\\hadoop\\hadoop-env.cmd 中的 JAVA_HOME，如 JAVA_HOME=C:\\PROGRA~1\\Java\\jdk1.8.0_241，路径中不能有空格 在根目录下添加 datanode、namenode 和 tmp 文件夹 修改 etc\\hadoop\\hdfs-site.xml，添加如下 xml, 注意/D:/hadoop-2.6.0/namenode 和/D:/hadoop-2.6.0/datanode 这两个值需要时之前创建文件夹的路径 1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;/D:/hadoop-2.6.0/namenode&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;/D:/hadoop-2.6.0/datanode&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 修改 etc\\hadoop\\core-site.xml 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 修改 etc\\hadoop\\mapred-site.xml 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 修改 etc\\hadoop\\yarn-site.xml 12345678910&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 以管理员身份打开 cmd 输入 hdfs namenode -format 来执行格式化 hdfs，执行后 namenode 文件里会自动生成一个 current 文件 cd 到根目录下 sbin 文件夹，输入 start-all.cmd 启动全部的 hadoop 服务 在相应的方法中右键 Debug “*”，就可以运行本地 debug 调试","link":"/2020/03/11/Windows10-%E4%B8%8B%E4%BD%BF%E7%94%A8-IDEA-%E9%85%8D%E7%BD%AE-Spark-%E7%9A%84-Debug-%E7%8E%AF%E5%A2%83/"},{"title":"关于我一巴掌拍坏硬盘导致博客源代码丢失一年半后重建博客这件事","text":"前言在上古时期，记忆已经渐渐模糊。只记得是一个午后，遥远的世界树在被邪恶的夜魇入侵，不知道那场战斗持续了多久，不知道是为什么而战，甚至最后的胜利消息也是通过只言片语所得知。我作为天辉方的爱由莎与夜魇的战斗是那么的焦灼。因为一次次的操作失误，一次次的倒下，头顶上的怒气条慢慢的攒满，直到那一巴掌的落下，怒气条空了。一开始，以为这只是一点桌面图标的消失、一个小小的弹窗提示、一个普通的报错，直到一整块硬盘的消失。当我从远古遗迹中回到现实位面，重新按下笔记本电脑开机键，一阵如炒豆子般的声音，引来方圆十里人们的围观，舍友们以为我偷偷在床上炒菜不分给他们。网上流行过一种说法，人死前会回忆他的一生，这时我相信这块硬盘也在回忆它的一生。宛如看见硬盘文件如到持续时间的幻象一样，消失得无影无踪。 太长不看：打游戏上头一巴掌拍坏机械硬盘。 步骤在一年半之后终于有空（其实是懒）根据 github page 上面的发布内容重新做一个 hexo 的源码文件夹。 这里有个问题，重建 blog 需要几步呢？ A. 3 B. 5 C. 钝角 1. 重装一个 hexo因为损坏的硬盘是 D 盘，hexo 是安装在 C 盘并不受影响，但是版本落后不少，在这一年半期间 npm 也升级过，在使用旧版 hexo 和 npm 碰到了兼容性问题，就直接重装 npm 和 hexo，也相当于进行一次升级。 直接在 nodejs 下载安装程序覆盖安装即可 2. 调整和优化一些设置旧 blog 主题用的 icarus 也没找到其他好看的主题就继续沿用。 但是旧 blog 的 icarus 是自定义过的，就需要对着旧 blog 的样式调整一下。 3. 复制内容将旧 blog 的 HTML 内容复制为 Markdown 格式。 这里使用的工具是 bejson 家的，挺好用。 但是也会遇到一些问题，如标题转换异常，还有通过 hexo 的高亮代码 codeblock 包裹的也会有这种转换问题，这就需要重新写过了。 标题转换，感觉应该算特性，在 typora 里面看的话会不正常，在 hexo 生成的内容则是显示正常的。 有序列表的序号也会有错误，需要手动修改 图片题注格式不正常（不是默认格式），这里是因为转换后加上了 html 的标签，md 解析后格式不是默认格式，去掉 html 标签即可 4. 自定义 JS 的引入这里需要引入自定义 JS 是因为第一篇内容里面写的代码需要。 也很简单吧 js 文件放到 themes\\主题名称\\source\\js 就好，然后在 markdown 里面引用就行。 有一个小细节要注意的是，路径要以 / 开始，写绝对路径，相对路径如果打开到内容页的话会无法加载 js 文件。 5. 部署到 github page首先安装一下 deployer 1npm install hexo-deployer-git --save 然后添加一下 _config.yml 配置 1234deploy: type: git repo: https://github.com/MisakaWater/MisakaWater.github.io branch: master 再运行一下 123hexo cleanhexo ghexo d 就开始推送了 其实整个过程难度不大，就是想记一下这个硬盘的故事，太逗了","link":"/2022/01/22/%E5%85%B3%E4%BA%8E%E6%88%91%E4%B8%80%E5%B7%B4%E6%8E%8C%E6%8B%8D%E5%9D%8F%E7%A1%AC%E7%9B%98%E5%AF%BC%E8%87%B4%E5%8D%9A%E5%AE%A2%E6%BA%90%E4%BB%A3%E7%A0%81%E4%B8%A2%E5%A4%B1%E4%B8%80%E5%B9%B4%E5%8D%8A%E5%90%8E%E9%87%8D%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%99%E4%BB%B6%E4%BA%8B/"},{"title":"安装与配置docker","text":"系统用的是ubuntu16.04，过程参考官方文档https://docs.docker.com/engine/install/ubuntu/ 这里只记录一下坑和小技巧 别换源先使用系统自带源，别着急换国内源之前安装docker换源后执行到下面的命令会报错，提示找不到docker的安装包 1sudo apt-get install docker-ce docker-ce-cli containerd.io 这里我的解决方法是 开tsocks，使用官方源来安装docker 修改docker仓库源安装完成后直接奔着 https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors 阿里的镜像去，感觉比其他的仓库源好用 有用的命令12345678910111213141516#查看运行的容器docker ps#退出并在后台运行Ctrl + P + Q #进入容器docker attach [CONTAINER ID]#-v挂载#譬如我要启动一个centos容器，宿主机的/test目录挂载到容器的/soft目录，可通过以下方式指定：docker run -it -v /test:/soft centos /bin/bash#冒号&quot;:&quot;前面的目录是宿主机目录，后面的目录是容器内目录。#进入docker交互模式sudo docker exec -it [CONTAINER ID] /bin/bash","link":"/2020/09/08/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEdocker/"},{"title":"将堆栈星轨变成一段流星雨视频","text":"前言疫情期间一直在家呆着也没事做就拍拍星星前两天拍了张星轨 ，但是忘了关长时间降噪全是断点不怎么满意 昨天晚上又拍了一次，比较成功还误打误撞的做了一段流星雨视频（雾）打算记录一下，供以后参考 星轨的堆栈拍摄方法网上又很多教程这里就不赘述了 这里直接介绍后期处理的部分 前提： 只需要一种运动方向的星星 星星的运动轨迹是自下而上的话就需要进行反序，自上而下则不需要对图片进行反序 后期我使用的是 lr 当然也可以用 acr 但是不方便统一管理图片 将图片导入电脑后在 lr 中添加图片然后进行调整 调整好照片后我们全选刚才拍摄的照片 在照片上右键——设置——同步设置 然后进行导出，导出设置中需要尽量选择小尺寸的图片输出不然后面的处理会很卡 导出后先需要对文件进行反序排列我编写了一个程序（附件在本文最后）进行反序 将程序放到图片文件夹内双击运行后目录下会多出一个 Re 文件夹里面就是反序好的图片 接下来我们打开 pr 建立好工程文档后以图片序列的方式导入反序好的图片 添加效果中视频效果——时间——残影 设置残影数量为 80、衰减 0.95、残影运算符最大值，其他的默认 导出就可以有一段类似流星雨的视频 也算是星空的另一种表现方式吧 文件反序程序","link":"/2020/02/19/%E5%B0%86%E5%A0%86%E6%A0%88%E6%98%9F%E8%BD%A8%E5%8F%98%E6%88%90%E4%B8%80%E6%AE%B5%E6%B5%81%E6%98%9F%E9%9B%A8%E8%A7%86%E9%A2%91/"},{"title":"记：winserver2008 的任务计划特性","text":"winserver2008 中任务计划程序运行程序时，程序的运行路径不是指定的路径下，而是 c:\\Windows\\system32\\下 解决办法 文件放到 system32 中执行。 写一个 bat 将计划中操作指向 bat 文件，bat 文件先 cd 再执行程序。","link":"/2020/02/27/%E8%AE%B0%EF%BC%9Awinserver2008-%E7%9A%84%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%89%B9%E6%80%A7/"}],"tags":[{"name":"JS","slug":"JS","link":"/tags/JS/"},{"name":"动画","slug":"动画","link":"/tags/%E5%8A%A8%E7%94%BB/"},{"name":"好玩的","slug":"好玩的","link":"/tags/%E5%A5%BD%E7%8E%A9%E7%9A%84/"},{"name":".NetCore","slug":"NetCore","link":"/tags/NetCore/"},{"name":"C#","slug":"C","link":"/tags/C/"},{"name":"EFCore","slug":"EFCore","link":"/tags/EFCore/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"SQLServer","slug":"SQLServer","link":"/tags/SQLServer/"},{"name":"WINDOWS","slug":"WINDOWS","link":"/tags/WINDOWS/"},{"name":"VUE","slug":"VUE","link":"/tags/VUE/"},{"name":"符号连接","slug":"符号连接","link":"/tags/%E7%AC%A6%E5%8F%B7%E8%BF%9E%E6%8E%A5/"},{"name":"HADOOP","slug":"HADOOP","link":"/tags/HADOOP/"},{"name":"Idea","slug":"Idea","link":"/tags/Idea/"},{"name":"Scala","slug":"Scala","link":"/tags/Scala/"},{"name":"Spark","slug":"Spark","link":"/tags/Spark/"},{"name":"大数据","slug":"大数据","link":"/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"图一乐","slug":"图一乐","link":"/tags/%E5%9B%BE%E4%B8%80%E4%B9%90/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"服务器","slug":"服务器","link":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"调试","slug":"调试","link":"/tags/%E8%B0%83%E8%AF%95/"},{"name":"好康的","slug":"好康的","link":"/tags/%E5%A5%BD%E5%BA%B7%E7%9A%84/"},{"name":"摄影","slug":"摄影","link":"/tags/%E6%91%84%E5%BD%B1/"},{"name":"照片","slug":"照片","link":"/tags/%E7%85%A7%E7%89%87/"},{"name":"WINDOWS SERVER","slug":"WINDOWS-SERVER","link":"/tags/WINDOWS-SERVER/"}],"categories":[{"name":"编程","slug":"编程","link":"/categories/%E7%BC%96%E7%A8%8B/"},{"name":"调试","slug":"调试","link":"/categories/%E8%B0%83%E8%AF%95/"},{"name":"网站","slug":"网站","link":"/categories/%E7%BD%91%E7%AB%99/"},{"name":"服务器","slug":"服务器","link":"/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"数据库","slug":"编程/数据库","link":"/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"摄影","slug":"摄影","link":"/categories/%E6%91%84%E5%BD%B1/"}]}